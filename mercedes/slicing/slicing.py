

## üßë‚Äçüè´ Clase: Slicing en Python


### üìå ¬øQu√© significa la palabra "slicing"?

"""En ingl√©s, "slice" significa rebanada o porci√≥n.
En programaci√≥n, slicing es la t√©cnica de extraer una parte (una rebanada) de una secuencia, como una lista, una cadena de texto (`str`), una tupla, etc."""



## ‚úÇÔ∏è 1. Sintaxis b√°sica


#secuencia[inicio:fin:paso] ->similar for 


#`inicio`: posici√≥n desde donde empezar (incluido).
#`fin`: posici√≥n donde terminar (excluido).
#`paso`: cada cu√°ntos elementos avanzar (puede ser negativo).

## üî° 2. Slicing con strings

"""
texto = "Python"
| C√≥digo        | Resultado  | Explicaci√≥n                        |
| ------------- | ---------- | ---------------------------------- |
| `texto[0:2]`  | `'Py'`     | De √≠ndice 0 a 1                    |
| `texto[1:4]`  | `'yth'`    | De √≠ndice 1 a 3                    |
| `texto[:3]`   | `'Pyt'`    | Desde el inicio hasta √≠ndice 2     |
| `texto[3:]`   | `'hon'`    | Desde √≠ndice 3 hasta el final      |
| `texto[:]`    | `'Python'` | Copia completa                     |
| `texto[::2]`  | `'Pto'`    | Cada dos letras                    |
| `texto[::-1]` | `'nohtyP'` | Invertido (de atr√°s para adelante) |"""


## üìã 3. Slicing con listas

numeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

#numeros[2:6]     # [2, 3, 4, 5]
#numeros[:4]      # [0, 1, 2, 3]
#numeros[6:]      # [6, 7, 8, 9]
numeros[::3]     # [0, 3, 6, 9]
numeros[::-1]    # [9, 8, 7, ..., 0] (invertida)

#noten que se estan pisando a si mismos en el lugar
#verificamos imprimiendo el ultimo
print(numeros[::-1]) #deberia imprimir [9,6,3,0]

## ‚ö†Ô∏è 4. ¬øQu√© pasa si los √≠ndices se salen del rango?

#Python no lanza error si te pas√°s en slicing:


numeros = [1, 2, 3]

print(numeros[0:10])   # [1, 2, 3] ‚Äî simplemente agarra lo que puede
numeros[10:]    # [] ‚Äî devuelve lista vac√≠a
print(numeros)



## üß™ 5. Ejemplo: Verificar pal√≠ndromo


def es_palindromo(palabra):
    return palabra == palabra[::-1]

es_palindromo("reconocer")   # True
es_palindromo("python")      # False


## üß† 6. Truco √∫til: Copiar secuencias


lista = [1, 2, 3]
copia = lista[:]   # copia completa

print(lista == copia)       # True
print(lista is copia)       # False (diferente objeto)


## üîÅ 7. Slicing con paso negativo

#Pod√©s usar slicing de derecha a izquierda:

texto = "abcdef"

texto[::-1]     # 'fedcba'
texto[-3:]      # 'def' (√∫ltimos 3 caracteres)
#texto[-4:-1]    # 'cde' (de la 4¬™ √∫ltima hasta la 2¬™ √∫ltima)

print(texto) #declarando "texto[-3:]" le da valor a esa variable pero no pisa la original

## ‚úÖ 8. Resumen visual


secuencia = ['a', 'b', 'c', 'd', 'e']
"""
√≠ndices    =   0    1    2    3    4
negativos  =  -5   -4   -3   -2   -1
"""

print(secuencia[1:4])   # ['b', 'c', 'd']
print(secuencia[-3:])   # ['c', 'd', 'e']
print(secuencia[::-1])  # ['e', 'd', 'c', 'b', 'a']




